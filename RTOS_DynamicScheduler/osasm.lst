


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           current_thread_ptr ; currently 
                                                            running thread
   14 00000000         
   15 00000000                 EXPORT           StartOS
   16 00000000                 EXPORT           ContextSwitch
   17 00000000                 EXPORT           PendSV_Handler
   18 00000000                 EXPORT           SVC_Handler
   19 00000000         
   20 00000000         
   21 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   22 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   23 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   24 00000000 000000C0 
                       NVIC_LEVEL14
                               EQU              0xC0        ; Systick priority 
                                                            value (second lowes
                                                            t).
   25 00000000 000000E0 
                       NVIC_LEVEL15
                               EQU              0xE0        ; PendSV priority v
                                                            alue (lowest).
   26 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   27 00000000         
   28 00000000         
   29 00000000         StartOS
   30 00000000 481C            LDR              R0, =NVIC_SYSPRI14 ; Setting Pe
                                                            ndSV priority to 7



ARM Macro Assembler    Page 2 


   31 00000002 F04F 02E0       LDR              R2, =NVIC_LEVEL15
   32 00000006 7002            STRB             R2, [R0]
   33 00000008         
   34 00000008 481B            LDR              R0, =NVIC_SYSPRI15 ; Setting Sy
                                                            stick priority to 6
                                                            
   35 0000000A F04F 02C0       LDR              R2, =NVIC_LEVEL14
   36 0000000E 7002            STRB             R2, [R0]
   37 00000010         
   38 00000010 481A            LDR              R0, =current_thread_ptr ; getti
                                                            ng the memory addre
                                                            ss of current_threa
                                                            d_ptr (**tcb)
   39 00000012 6801            LDR              R1, [R0]    ; getting the point
                                                            er to the tcb (*tcb
                                                            )
   40 00000014 F8D1 D000       LDR              SP, [R1]    ; getting the actua
                                                            l tcb
   41 00000018 E8BD 0FF0       POP              {R4-R11}
   42 0000001C BC0F            POP              {R0-R3}
   43 0000001E F85D CB04       POP              {R12}
   44 00000022 F85D EB04       POP              {LR}        ; discard link regi
                                                            ster
   45 00000026 F85D EB04       POP              {LR}        ; link to start of 
                                                            thread
   46 0000002A BC02            POP              {R1}        ; discard PSR
   47 0000002C B662            CPSIE            I           ; enable interrupts
                                                            
   48 0000002E 4770            BX               LR          ; start first threa
                                                            d
   49 00000030         
   50 00000030         OSStartHang
   51 00000030 E7FE            B                OSStartHang ; Should never get 
                                                            here
   52 00000032         
   53 00000032         
   54 00000032         ;*******************************************************
                       *************************************************
   55 00000032         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   56 00000032         ;                                           void Context
                       Switch(void)
   57 00000032         ;
   58 00000032         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   59 00000032         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   60 00000032         ;*******************************************************
                       *************************************************
   61 00000032         
   62 00000032         ContextSwitch
   63 00000032 4813            LDR              R0, =NVIC_INT_CTRL
   64 00000034 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   65 00000038 6001            STR              R1, [R0]
   66 0000003A 4770            BX               LR
   67 0000003C         
   68 0000003C         
   69 0000003C         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 3 


   70 0000003C         ;                                         HANDLE PendSV 
                       EXCEPTION
   71 0000003C         ;                                     void OS_CPU_PendSV
                       Handler(void)
   72 0000003C         ;
   73 0000003C         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   74 0000003C         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   75 0000003C         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   76 0000003C         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   77 0000003C         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   78 0000003C         ;              a thread or occurs due to an interrupt or
                        exception.
   79 0000003C         ;
   80 0000003C         ;           2) Pseudo-code is:
   81 0000003C         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   82 0000003C         ;              b) Save remaining regs r4-r11 on process 
                       stack;
   83 0000003C         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
   84 0000003C         ;              d) Call OSTaskSwHook();
   85 0000003C         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   86 0000003C         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
   87 0000003C         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
   88 0000003C         ;              h) Restore R4-R11 from new process stack;
                       
   89 0000003C         ;              i) Perform exception return which will re
                       store remaining context.
   90 0000003C         ;
   91 0000003C         ;           3) On entry into PendSV handler:
   92 0000003C         ;              a) The following have been saved on the p
                       rocess stack (by processor):
   93 0000003C         ;                 xPSR, PC, LR, R12, R0-R3
   94 0000003C         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
   95 0000003C         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
   96 0000003C         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
   97 0000003C         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
   98 0000003C         ;
   99 0000003C         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  100 0000003C         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  101 0000003C         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  102 0000003C         ;*******************************************************
                       *************************************************
  103 0000003C         



ARM Macro Assembler    Page 4 


  104 0000003C         PendSV_Handler
  105 0000003C F3EF 8310       MRS              R3, PRIMASK ; Start critical se
                                                            ction
  106 00000040 B672            CPSID            I           ; 2) Prevent interr
                                                            upt during switch
  107 00000042 E92D 0FF0       PUSH             {R4-R11}    ; 3) Save remaining
                                                             regs r4-11
  108 00000046 480D            LDR              R0, =current_thread_ptr ; 4) R0
                                                            =pointer to RunPt, 
                                                            old thread
  109 00000048 6801            LDR              R1, [R0]    ;    R1 = RunPt
  110 0000004A F8C1 D000       STR              SP, [R1]    ; 5) Save SP into T
                                                            CB
  111 0000004E 688A            LDR              R2, [R1,#8] ; Load flag to chec
                                                            k for priority jump
                                                            
  112 00000050 2A01            CMP              R2, #1      ; If true then jump
                                                             priorites
  113 00000052 D001            BEQ              Jump
  114 00000054 6849            LDR              R1, [R1,#4] ; 6) R1 = RunPt->ne
                                                            xt
  115 00000056 E003            B                Done
  116 00000058         Jump
  117 00000058 F04F 0200       MOV              R2, #0
  118 0000005C 608A            STR              R2, [R1,#8] ; Clear jump flag
  119 0000005E 68C9            LDR              R1, [R1,#12] ; R1 = RunPt->jump
                                                            To
  120 00000060         Done
  121 00000060 6001            STR              R1, [R0]    ;    RunPt = R1
  122 00000062 F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
  123 00000066 E8BD 0FF0       POP              {R4-R11}    ; 8) restore regs r
                                                            4-11
  124 0000006A F383 8810       MSR              PRIMASK, R3 ; End critical sect
                                                            ion
  125 0000006E 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  126 00000070         
  127 00000070         
  128 00000070         ;*******************************************************
                       *************************************************
  129 00000070         ;                                         HANDLE SVC EXC
                       EPTION
  130 00000070         ;                                     void OS_CPU_SVCHan
                       dler(void)
  131 00000070         ;
  132 00000070         ; Note(s) : SVC is a software-triggered exception to mak
                       e OS kernel calls from user land. 
  133 00000070         ;           The function ID to call is encoded in the in
                       struction itself, the location of which can be
  134 00000070         ;           found relative to the return address saved o
                       n the stack on exception entry.
  135 00000070         ;           Function-call paramters in R0..R3 are also a
                       uto-saved on stack on exception entry.
  136 00000070         ;*******************************************************
                       *************************************************
  137 00000070         
  138 00000070                 IMPORT           OS_Id



ARM Macro Assembler    Page 5 


  139 00000070                 IMPORT           OS_Kill
  140 00000070                 IMPORT           OS_Sleep
  141 00000070                 IMPORT           OS_Time
  142 00000070                 IMPORT           OS_AddThread
  143 00000070         
  144 00000070         SVC_Handler
  145 00000070         ; put your Lab 5 code here
  146 00000070         
  147 00000070         
  148 00000070 4770            BX               LR          ; Return from excep
                                                            tion
  149 00000072         
  150 00000072         
  151 00000072         
  152 00000072 00 00           ALIGN
  153 00000074                 END
              E000ED22 
              E000ED23 
              00000000 
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\osasm.d -o.\osasm.o -I.\RTE\_Lab3 -IC:\Users\Malav\AppData\Local
\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\Malav\AppData\Local\Ar
m\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" 
--predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 536" --pred
efine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 
1" --list=.\osasm.lst ..\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 00000032

Symbol: ContextSwitch
   Definitions
      At line 62 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 16 in file ..\RTOS_Labs_common\osasm.s
Comment: ContextSwitch used once
Done 00000060

Symbol: Done
   Definitions
      At line 120 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 115 in file ..\RTOS_Labs_common\osasm.s
Comment: Done used once
Jump 00000058

Symbol: Jump
   Definitions
      At line 116 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 113 in file ..\RTOS_Labs_common\osasm.s
Comment: Jump used once
OSStartHang 00000030

Symbol: OSStartHang
   Definitions
      At line 50 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 51 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
PendSV_Handler 0000003C

Symbol: PendSV_Handler
   Definitions
      At line 104 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 17 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
SVC_Handler 00000070

Symbol: SVC_Handler
   Definitions
      At line 144 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler used once
StartOS 00000000

Symbol: StartOS



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 29 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 15 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOS used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 21 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 63 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_INT_CTRL used once
NVIC_LEVEL14 000000C0

Symbol: NVIC_LEVEL14
   Definitions
      At line 24 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 35 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_LEVEL14 used once
NVIC_LEVEL15 000000E0

Symbol: NVIC_LEVEL15
   Definitions
      At line 25 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 31 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_LEVEL15 used once
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 64 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_PENDSVSET used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 22 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 30 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_SYSPRI14 used once
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 23 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 34 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_SYSPRI15 used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 142 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_AddThread unused
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 138 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Id unused
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 139 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Kill unused
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 140 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Sleep unused
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 141 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Time unused
current_thread_ptr 00000000

Symbol: current_thread_ptr
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 38 in file ..\RTOS_Labs_common\osasm.s
      At line 108 in file ..\RTOS_Labs_common\osasm.s

6 symbols
357 symbols in table
